

% This userscript implements the Psycho-Physiological Interaction (PPI)
% analysis described in Chapter 36 of the SPM12 manual. The required data
% can be downloaded (as of this writing) from:
%
%   https://www.fil.ion.ucl.ac.uk/spm/data/
%
% (use the link "Attention to Visual Motion - single subject")
%
% The data has been preprocessed, so only modeling, vois extraction, PPI
% regressor generation, and PPI modeling need be run. You should compare
% QA figures generated by various aa modules to the concommitant figures
% appearing in the chapter. If you want to compare your final results to
% Figure 36.15, load SPM.mat from aamod_firstlevel_threshold_00002/stats
% into the SPM gui and generate the glass brain and section display using
% the steps described in the manual. Your results may differ slightly 
% from those shown because of module settings, etc.


% ------------------------------------------------------------------------------------------------------------------------------
% initialization
% ------------------------------------------------------------------------------------------------------------------------------

clear all;
aa_ver5;

aap = aarecipe('SPM_CH36.xml');  % this uses the default parameter file in $HOME/.aa/aap_parameter_user.xml

% ------------------------------------------------------------------------------------------------------------------------------
% data and results directories
% ------------------------------------------------------------------------------------------------------------------------------

% customize the UPPERCASE variables here according to your file system

% TOPLEVEL_DATADIR is where you downloaded "attention" from the SPM website
% (it will contain "structural" & "functional" directories as well as several modeling .mat files)

TOPLEVEL_DATADIR = '/path/to/SPM/attention/data';

% results will be written to RESULTS_DIR_PARENTDIR/RESULTS_DIR
% (RESULTS_DIR_NAME must exist; RESULTS_DIR_NAME will be created if need-be)

RESULTSDIR_PARENTDIR = '/path/to/parentdir';
RESULTSDIR = 'RESULTS_CH36'; 

% ------------------------------------------------------------------------------------------------------------------------------
% data specification
% ------------------------------------------------------------------------------------------------------------------------------

aap.directory_conventions.rawdatadir = TOPLEVEL_DATADIR;

aap.acq_details.root = RESULTSDIR_PARENTDIR;
aap.directory_conventions.analysisid = RESULTSDIR; 

aap.options.autoidentifystructural = 0;
aap.options.NIFTI4D = 1;

aap.acq_details.numdummies = 0;

subjectID = 'M00527';
subjectID_dir = 'M00527';

% STRUCTURAL DATA ------------------------------------------------------------

% the data on the SPM website is older hdr/img format (as of this writing)
% the easiest way to work with this format is to convert everything to nifti

img_fname = fullfile(TOPLEVEL_DATADIR, 'structural', 'nsM00587_0002.hdr');
converted_structural = fullfile(TOPLEVEL_DATADIR, 'structural', 'nsM00587.nii');

% you may run this script many times exploring different options etc
% so check here if we already did the conversion and if so skip

if ~exist(converted_structural,'file')
    V = spm_vol(img_fname);
    ima = spm_read_vols(V);
    V.fname = converted_structural;
    spm_write_vol(V,ima);
end

% aa needs to know what we used for the nifti structural prefix  
aap.tasksettings.aamod_structuralfromnifti.sfxformodality = 'ns';


% FUNCTIONAL DATA ------------------------------------------------------------

converted_epi_fname = fullfile(TOPLEVEL_DATADIR, 'functional', 'M00587.nii');

if ~exist(converted_epi_fname,'file')
    hList = cellstr(spm_select('FPList', fullfile(TOPLEVEL_DATADIR,'functional'), '.*hdr$'));
    spm_file_merge(hList,'M00587.nii'); % this writes the file in TOP_LEVEL_DATADIR/functional
end

% create a minimal json header to replace hdr info 
% - we only need TR (the value is provided in the SPM manual chapter)

minimal_json_header = fullfile(TOPLEVEL_DATADIR, 'functional', 'header.json');

if ~exist(minimal_json_header,'file')
    s = struct('RepetitionTime',3.220);
    fid = fopen(minimal_json_header,'w');
    fprintf(fid,jsonencode(s));
    fclose(fid);
end

epi_struct = struct('fname', converted_epi_fname, 'hdr', minimal_json_header);

aap = aas_addsubject(aap, subjectID, subjectID_dir, 'structural', {converted_structural}, 'functional', {epi_struct});

aap = aas_addsession(aap,'SESS01');


% ------------------------------------------------------------------------------------------------------------------------------
% GLM
% ------------------------------------------------------------------------------------------------------------------------------

% see Ch36 in SPM manual for a description of the experiment and model

% events

temp = load(fullfile(TOPLEVEL_DATADIR, 'factors.mat'));

aap = aas_addevent(aap,'aamod_firstlevel_model_00001','*','*','stationary', temp.stat, 10); 
aap = aas_addevent(aap,'aamod_firstlevel_model_00001','*','*','noattention', temp.natt, 10); 
aap = aas_addevent(aap,'aamod_firstlevel_model_00001','*','*','attention', temp.att, 10); 

% 3 block nuisance regressors -- see notes in Ch 36)
% note we DON'T want these convolved with the HRF ergo ...0,0) setting

temp = load(fullfile(TOPLEVEL_DATADIR, 'block_regressors.mat'));

aap = aas_addcovariate(aap,'aamod_firstlevel_model_00001','*','*','BLOCK1', temp.block1, 0,0); 
aap = aas_addcovariate(aap,'aamod_firstlevel_model_00001','*','*','BLOCK2', temp.block2, 0,0);
aap = aas_addcovariate(aap,'aamod_firstlevel_model_00001','*','*','BLOCK3', temp.block3, 0,0);

% PPI model setup

% the PPI is run in the 2nd instance of aamod_firstlevel_model in the
% tasklist. aa will add the three required PPI regressors for
% you. However, we want to include the 3 block nuisance regressors
% as before, so we add them explicitly. NB: we can't use wildcards
% here for subject and session like we did above because the PPI regressors 
% added automatically use explicit subject and session identifiers. This
% isn't difficult in this example because there is only one subject /
% session -- in an analysis with mutiple subjects/sessions you would do
% this in a loop.


aap = aas_addcovariate(aap,'aamod_firstlevel_model_00002','M00527','SESS01','BLOCK1', temp.block1, 0,0); 
aap = aas_addcovariate(aap,'aamod_firstlevel_model_00002','M00527','SESS01','BLOCK2', temp.block2, 0,0);
aap = aas_addcovariate(aap,'aamod_firstlevel_model_00002','M00527','SESS01','BLOCK3', temp.block3, 0,0);


% NB: aa allows you to define more advanced models that combine multiple 
% PPI effects. This requires explicitly adding *all* regressors and using 
% a "ppidef_" prefix naming convention. See aas_covariate for details.

% ------------------------------------------------------------------------------------------------------------------------------
% contrasts
% ------------------------------------------------------------------------------------------------------------------------------

% Note contast names used here all begin with 'C_'. This is not required,
% but it's useful for quickly identifying contrasts in various QA figures
% generated during the analysis (distinguishing them from, say, regressor
% names).

% We define an "events of interest" F contrast that we will use to
% adjust the time series in aamod_voi_extract. Note the clickthough
% described in chapter 36 uses [eye(3), zeros(3,4)] whereas here we use
% [eye(3), zeros(3,3)] because aas_addcontrast does not recognize the
% constant column as a regressor of interest.

aap = aas_addcontrast(aap, 'aamod_firstlevel_contrasts_00001', '*', 'sameforallsessions', [eye(3), zeros(3,3)], 'C_EOI', 'F');

% these are the two T contrasts of interest for the model

aap = aas_addcontrast(aap, 'aamod_firstlevel_contrasts_00001', '*', 'sameforallsessions', [0 -1 1], 'C_ATT', 'T');
aap = aas_addcontrast(aap, 'aamod_firstlevel_contrasts_00001', '*', 'sameforallsessions', [-2 1 1], 'C_MOT', 'T');

% The columns of the design matrix in the PPI are:
%
%   [ block-1 block2 block-3 PPI PSYCH PHYS CONSTANT ] 
%
% -- see DESIGN_MATRIX.jpg in aamod_firstlevel_model_00002 (note the
% columns are in a different order than that shown in the clickthrough).
%
% The regressor of interest is PPI (column 4). As such, we could define the
% contrast here as [ 0 0 0 1 0 0 0]. However, it's less error-prone to 
% simply define the contrast using the regressor name: '+1xPPI' (note the
% regressor name must be ALL UPPERCASE to use this option).

aap = aas_addcontrast(aap, 'aamod_firstlevel_contrasts_00002', '*', 'sameforallsessions', '+1xPPI', 'C_PPI', 'T');

% ------------------------------------------------------------------------------------------------------------------------------
% module settings
% ------------------------------------------------------------------------------------------------------------------------------

% 1) base model

% the metadata provided on the SPM website is expressed in scans

aap.tasksettings.aamod_firstlevel_model(1).xBF.UNITS= 'scans'; 
aap.tasksettings.aamod_firstlevel_model(1).highpassfilter= 192; 

% aap.tasksettings.aamod_firstlevel_threshold(1).threshold.p = 0.001;
% aap.tasksettings.aamod_firstlevel_threshold(1).threshold.extent = 10;
% aap.tasksettings.aamod_firstlevel_threshold(1).threshold.correction = 'none';
% aap.tasksettings.aamod_firstlevel_threshold(1).description = '0.001 UNC/ 10 ext';

% this matches settings used for vois extraction in the clickthrough

aap.tasksettings.aamod_firstlevel_threshold(1).threshold.p = 0.05;
aap.tasksettings.aamod_firstlevel_threshold(1).threshold.extent = 3;
aap.tasksettings.aamod_firstlevel_threshold(1).threshold.correction = 'FWE';
aap.tasksettings.aamod_firstlevel_threshold(1).description = '0.05 FWE/ 3 ext';

% 2) PPI model

aap.tasksettings.aamod_firstlevel_model(2).xBF.UNITS= 'scans'; 
aap.tasksettings.aamod_firstlevel_model(2).highpassfilter= 192; 

% you may want to adjust thresholding here to compare results with Fig
% 36.15. Alternatively, you could fire up SPM, use the "results" button,
% and load /aamod_firstlevel_threshold_00002/M00527/stats/SPM.mat and
% follow the Fig 36.15 instructions in the clickthrough.

% aap.tasksettings.aamod_firstlevel_threshold(2).threshold.p = 0.005;
aap.tasksettings.aamod_firstlevel_threshold(2).threshold.p = 0.01;
aap.tasksettings.aamod_firstlevel_threshold(2).threshold.extent = 10;
% aap.tasksettings.aamod_firstlevel_threshold(2).threshold.correction = 'FWE';
aap.tasksettings.aamod_firstlevel_threshold(2).threshold.correction = 'none';
aap.tasksettings.aamod_firstlevel_threshold(2).description = 'PPI';

% 3) VOI extraction (refer to section 36.4)

aap.tasksettings.aamod_vois_extract.adjust = 'C_EOI';
aap.tasksettings.aamod_vois_extract.VOI(1).name = 'V2';
aap.tasksettings.aamod_vois_extract.VOI(1).type = 'sphere';
aap.tasksettings.aamod_vois_extract.VOI(1).centre = 'xyz';
aap.tasksettings.aamod_vois_extract.VOI(1).centredefinition.xyz = [15 -78 -9];
aap.tasksettings.aamod_vois_extract.VOI(1).size = 10;

% note we're using the sphere center identified in the clickthrough which
% cheating a little. A more respectable approach would be to use the contrast
% maximum after masking it with an anatomical atlas of V2. The settings for
% vois_extract would look like this:

% aap.tasksettings.aamod_vois_extract.adjust = 'C_EOI';
% aap.tasksettings.aamod_vois_extract.VOI(1).name = 'V2';
% aap.tasksettings.aamod_vois_extract.VOI(1).type = 'sphere';
% aap.tasksettings.aamod_vois_extract.VOI(1).centre = 'roimaximum';
% aap.tasksettings.aamod_vois_extract.VOI(1).centredefinition.roival = 666; % whatever identifies V2 in atlas
% aap.tasksettings.aamod_vois_extract.VOI(1).centredefinition.contrast = 'C_MOT';
% aap.tasksettings.aamod_vois_extract.VOI(1).size = 10;
% 
% aap = aas_addinitialstream(aap,'aamod_vois_extract_00001.rois','M00527',{'/path/to/anatomical/atlas.nii'}); 

% 4) options for ppi_prepare:

aap.tasksettings.aamod_ppi_prepare.PPI.name = 'V2x(Att-NoAtt)';
aap.tasksettings.aamod_ppi_prepare.PPI.voiname = 'V2';
aap.tasksettings.aamod_ppi_prepare.PPI.contrastspec = '+1xattention|-1xnoattention';


% ------------------------------------------------------------------------------------------------------------------------------
% RUN
% ------------------------------------------------------------------------------------------------------------------------------

aa_doprocessing(aap);


